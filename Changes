0.18    2008-12-09

- Fey::SQL::Insert->into claimed it took a table as an argument, but
  was only accepting a list of columns. Fixed by Dieter Pearcey.


0.17    2008-11-21

- Fey::SQL::Select->group_by() was not returning $self, so it could be
  in the middle of a chain. Reported by Aristotle Pagaltzis. RT
  #41062.

- Made (almost) all the methods that generate portions of a query
  public, for example, $select->select_clause(), ->where_clause(),
  etc. See the various Fey::SQL::* docs for details. Requested by
  Dieter Pearcey.


0.16    2008-11-14

- Fey::SQL::Select did not allow outer joins using table
  aliases. Reported by Aristotle Pagaltzis. RT #40856.

- Fey::SQL::Select->select will now accept another Fey::SQL::Select,
  allowing subselects in the SELECT clause. Requested by Aristotle
  Pagaltzis. RT #40858.

- Fey::Table->alias() and Fey::Column->alias() now allow a single
  argument, an alias name. This is a shortcut for the most common use
  case. Requested by Aristotle Pagaltzis.

- Added Fey::Table->aliased_column() and Fey::Table->aliased_columns()
  methods. Requested by Aristotle Pagaltzis. RT #40857.


0.15    2008-10-28

- Added Fey::SQL::Select->select_clause_elements(), most for the
  benefit of Fey::ORM.


0.14    2008-09-19

- Fey did not handle this join correctly:

    $q->from( $s->table('User') );
    $q->from( $s->table('User'), $s->table('UserGroup') );

  It added a spurious comma so you got

    FROM "User", JOIN ...

  Reported by Aristotle Pagaltzis.

- The Fey::FK docs for the constructor did not name the parameters it
  expects correctly. Reported by Aristotle Pagaltzis.


0.13    2008-09-19

- Including a table in a from clause failed. Now the Fey::Schema
  object will accept a table alias as a parameter for the
  foreign_keys_between_tables() method. When given an alias, it
  returns a Fey::FK object which contains columns from that
  alias. This faciliates creating SQL that joins on an alias. Reported
  by Aristotle Pagaltzis.


0.12    2008-09-01

- Changes to work with the latest versions of Moose.


0.11    2008-08-26

- 0.10 was missing a dependency - MooseX::AttributeHelpers.


0.10    2008-08-25

- Optimizations to cache frequently used (and rarely changing) method
  return values as attributes.

- As a result of the above, several methods that used to return arrays
  now return array references. These are Fey::FK->column_pairs(),
  Fey::Table->candidate_keys(), and Fey::Table->primary_key(), and
  Fey::Literal::Function->args().

- Overloaded objects are now handled (mostly) correctly when used as
  parameters in SQL statements. I say mostly because overloading in
  Perl is so broken that it's not possible to deal with them 100%
  correctly.


0.09    2008-07-31

- If a where clause had a subgroup after a comparison (like "WHERE x =
  1 AND ( y = 2 )", it didn't properly add the needed "AND".


0.08    2008-07-02

- The fix for "SELECT statements with multiple joins generated bogus
  SQL (a spurious comma separating JOIN clauses)" still generated
  bogus SQL in some cases.


0.07    2008-06-26

- SELECT statements with multiple joins generated bogus SQL (a
  spurious comma separating JOIN clauses).


0.06    2008-03-06

- Allow a Fey::Column object to have a column with precision but no
  length, since Postgres allows this.


0.05    2008-02-20

- Some small tweaks to take advantage of recent Moose changes.

- Added Fey::FK->pretty_print().

- Some internal changes for the benefit of Fey::ORM.


0.04    2008-02-13

- Some SQL methods (order_by() and limit()) did not return the object
  on which they were called, so they broke method chaining.


0.03    2008-02-06

- Renamed the distro from Fey-Core to just Fey.

- Added automatic use of placeholders to Fey::SQL. Now when you pass
  literal values, the default is to convert them to placeholders. The
  values can be retrieved from the new
  bind_params(). method. Suggested by Daisuke Maki.


0.02    2008-02-05

- Moved Fey::Test to its own distro, and made it a build prereq.


0.01    2008-02-02

- First release upon an unsuspecting world.
